#!/usr/bin/env python3
import sys, os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import re

def distill_text(text: str, max_length: int = 300) -> str:
    """
    Condense raw text into a distilled summary.
    This function removes extra whitespace and, if the text exceeds max_length,
    returns a truncated version with an ellipsis. This is a placeholder for a
    more sophisticated summarization algorithm.
    """
    # Remove extra whitespace
    distilled = " ".join(text.split())
    if len(distilled) <= max_length:
        return distilled
    else:
        return distilled[:max_length].rstrip() + "..."

# --- Self-Test Stub ---
def test_distill():
    print("\n--- Running Self-Test for Distill ---\n")
    raw_text = """
    In the ever-evolving landscape of technology, data is growing exponentially.
    However, the sheer volume of raw text and information can overwhelm modern AI models.
    It becomes imperative to distill this data into a more concise and manageable form,
    preserving the essential meaning while reducing token bloat.
    This approach not only optimizes computational resources but also enhances the
    quality of responses generated by AI systems. The art of distillation transforms
    verbose data into a powerful, succinct narrative.
    """
    print("Raw Text:")
    print(raw_text)
    print("\nDistilled Text:")
    print(distill_text(raw_text, max_length=200))
    print("\n--- Distill Self-Test Completed ---\n")

if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == "test":
        test_distill()
